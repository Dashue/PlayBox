/**
 * Price Data Warehouse - Items
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import {Inject, Injectable, Optional} from '@angular/core';
import {Http, Headers, URLSearchParams, RequestMethod, RequestOptions, RequestOptionsArgs, Response} from '@angular/http';
import {Observable} from 'rxjs/Observable';
import * as models from '../models';
import {BASE_PATH} from './variables';
import {Configuration} from './configuration';

/* tslint:disable:no-unused-variable member-ordering */

@Injectable()
export class DefaultApi {
  protected basePath = 'https://localhost';
  public defaultHeaders: Headers = new Headers();
  public configuration: Configuration = new Configuration();

  constructor(protected http: Http, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
    }
  }

  /**
   *
   * Gets a list of &#x60;Item&#x60; objects. Optional query param of **limit** determines limit of returned array.
   * @param limit Size of array
   */
  public itemsGet(limit?: number, extraHttpRequestParams?: any): Observable<Array<models.Item>> {
    return this.itemsGetWithHttpInfo(limit, extraHttpRequestParams)
    .map((response: Response) => {
      if (response.status === 204) {
        return undefined;
      } else {
        return response.json();
      }
    });
  }

  /**
   *
   * Removes an &#x60;Item&#x60; object by ID.
   * @param id ID of Item to remove
   */
  public itemsIdDelete(id: number, extraHttpRequestParams?: any): Observable<{}> {
    return this.itemsIdDeleteWithHttpInfo(id, extraHttpRequestParams)
    .map((response: Response) => {
      if (response.status === 204) {
        return undefined;
      } else {
        return response.json();
      }
    });
  }

  /**
   *
   * Gets an &#x60;Item&#x60; object by ID.
   * @param id ID of Item to use
   */
  public itemsIdGet(id: number, extraHttpRequestParams?: any): Observable<models.Item> {
    return this.itemsIdGetWithHttpInfo(id, extraHttpRequestParams)
    .map((response: Response) => {
      if (response.status === 204) {
        return undefined;
      } else {
        return response.json();
      }
    });
  }

  /**
   *
   * Updates an &#x60;Item&#x60; by ID.
   * @param id ID of Item to use
   * @param item Item to update
   */
  public itemsIdPut(id: number, item: models.NewItem, extraHttpRequestParams?: any): Observable<models.Item> {
    return this.itemsIdPutWithHttpInfo(id, item, extraHttpRequestParams)
    .map((response: Response) => {
      if (response.status === 204) {
        return undefined;
      } else {
        return response.json();
      }
    });
  }

  /**
   *
   * Creates an &#x60;Item&#x60; object.
   * @param item Item to create
   */
  public itemsPost(item: models.NewItem, extraHttpRequestParams?: any): Observable<models.Item> {
    return this.itemsPostWithHttpInfo(item, extraHttpRequestParams)
    .map((response: Response) => {
      if (response.status === 204) {
        return undefined;
      } else {
        return response.json();
      }
    });
  }


  /**
   *
   * Gets a list of &#x60;Item&#x60; objects. Optional query param of **limit** determines limit of returned array.
   * @param limit Size of array
   */
  public itemsGetWithHttpInfo(limit?: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/items`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (limit !== undefined) {
      queryParameters.set('limit', <any>limit);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   *
   * Removes an &#x60;Item&#x60; object by ID.
   * @param id ID of Item to remove
   */
  public itemsIdDeleteWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/items/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling itemsIdDelete.');
    }
    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   *
   * Gets an &#x60;Item&#x60; object by ID.
   * @param id ID of Item to use
   */
  public itemsIdGetWithHttpInfo(id: number, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/items/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling itemsIdGet.');
    }
    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   *
   * Updates an &#x60;Item&#x60; by ID.
   * @param id ID of Item to use
   * @param item Item to update
   */
  public itemsIdPutWithHttpInfo(id: number, item: models.NewItem, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/items/${id}`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling itemsIdPut.');
    }
    // verify required parameter 'item' is not null or undefined
    if (item === null || item === undefined) {
      throw new Error('Required parameter item was null or undefined when calling itemsIdPut.');
    }
    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Put,
      headers: headers,
      body: item == null ? '' : JSON.stringify(item), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   *
   * Creates an &#x60;Item&#x60; object.
   * @param item Item to create
   */
  public itemsPostWithHttpInfo(item: models.NewItem, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/items`;

    let queryParameters = new URLSearchParams();
    let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'item' is not null or undefined
    if (item === null || item === undefined) {
      throw new Error('Required parameter item was null or undefined when calling itemsPost.');
    }
    // to determine the Content-Type header
    let consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    let produces: string[] = [
      'application/json'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: item == null ? '' : JSON.stringify(item), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
